// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: EnvironmentalMonitoringSystem.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from EnvironmentalMonitoringSystem.proto</summary>
public static partial class EnvironmentalMonitoringSystemReflection {

  #region Descriptor
  /// <summary>File descriptor for EnvironmentalMonitoringSystem.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static EnvironmentalMonitoringSystemReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CiNFbnZpcm9ubWVudGFsTW9uaXRvcmluZ1N5c3RlbS5wcm90byLDBAoRRW52",
          "aXJvbm1lbnRhbERhdGESMwoLdGVtcGVyYXR1cmUYASABKAsyHi5FbnZpcm9u",
          "bWVudGFsRGF0YS5UZW1wZXJhdHVyZRItCghodW1pZGl0eRgCIAEoCzIbLkVu",
          "dmlyb25tZW50YWxEYXRhLkh1bWlkaXR5Ei0KCHByZXNzdXJlGAMgASgLMhsu",
          "RW52aXJvbm1lbnRhbERhdGEuUHJlc3N1cmUSJQoEd2luZBgEIAEoCzIXLkVu",
          "dmlyb25tZW50YWxEYXRhLldpbmQSLQoIZGF0ZXRpbWUYBSABKAsyGy5FbnZp",
          "cm9ubWVudGFsRGF0YS5EYXRlVGltZRItCghsb2NhdGlvbhgGIAEoCzIbLkVu",
          "dmlyb25tZW50YWxEYXRhLkxvY2F0aW9uGioKC1RlbXBlcmF0dXJlEg0KBXZh",
          "bHVlGAEgASgCEgwKBHVuaXQYAiABKAkaJwoISHVtaWRpdHkSDQoFdmFsdWUY",
          "ASABKAISDAoEdW5pdBgCIAEoCRonCghQcmVzc3VyZRINCgV2YWx1ZRgBIAEo",
          "AhIMCgR1bml0GAIgASgJGjYKBFdpbmQSDQoFc3BlZWQYASABKAISEQoJZGly",
          "ZWN0aW9uGAIgASgCEgwKBHVuaXQYAyABKAkaLwoIRGF0ZVRpbWUSEQoJdGlt",
          "ZXN0YW1wGAEgASgDEhAKCHRpbWV6b25lGAIgASgJGi8KCExvY2F0aW9uEhAK",
          "CGxhdGl0dWRlGAEgASgCEhEKCWxvbmdpdHVkZRgCIAEoAmIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::EnvironmentalData), global::EnvironmentalData.Parser, new[]{ "Temperature", "Humidity", "Pressure", "Wind", "Datetime", "Location" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::EnvironmentalData.Types.Temperature), global::EnvironmentalData.Types.Temperature.Parser, new[]{ "Value", "Unit" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnvironmentalData.Types.Humidity), global::EnvironmentalData.Types.Humidity.Parser, new[]{ "Value", "Unit" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnvironmentalData.Types.Pressure), global::EnvironmentalData.Types.Pressure.Parser, new[]{ "Value", "Unit" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnvironmentalData.Types.Wind), global::EnvironmentalData.Types.Wind.Parser, new[]{ "Speed", "Direction", "Unit" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnvironmentalData.Types.DateTime), global::EnvironmentalData.Types.DateTime.Parser, new[]{ "Timestamp", "Timezone" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnvironmentalData.Types.Location), global::EnvironmentalData.Types.Location.Parser, new[]{ "Latitude", "Longitude" }, null, null, null, null)})
        }));
  }
  #endregion

}
#region Messages
public sealed partial class EnvironmentalData : pb::IMessage<EnvironmentalData> {
  private static readonly pb::MessageParser<EnvironmentalData> _parser = new pb::MessageParser<EnvironmentalData>(() => new EnvironmentalData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnvironmentalData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EnvironmentalMonitoringSystemReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentalData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentalData(EnvironmentalData other) : this() {
    temperature_ = other.temperature_ != null ? other.temperature_.Clone() : null;
    humidity_ = other.humidity_ != null ? other.humidity_.Clone() : null;
    pressure_ = other.pressure_ != null ? other.pressure_.Clone() : null;
    wind_ = other.wind_ != null ? other.wind_.Clone() : null;
    datetime_ = other.datetime_ != null ? other.datetime_.Clone() : null;
    location_ = other.location_ != null ? other.location_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentalData Clone() {
    return new EnvironmentalData(this);
  }

  /// <summary>Field number for the "temperature" field.</summary>
  public const int TemperatureFieldNumber = 1;
  private global::EnvironmentalData.Types.Temperature temperature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnvironmentalData.Types.Temperature Temperature {
    get { return temperature_; }
    set {
      temperature_ = value;
    }
  }

  /// <summary>Field number for the "humidity" field.</summary>
  public const int HumidityFieldNumber = 2;
  private global::EnvironmentalData.Types.Humidity humidity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnvironmentalData.Types.Humidity Humidity {
    get { return humidity_; }
    set {
      humidity_ = value;
    }
  }

  /// <summary>Field number for the "pressure" field.</summary>
  public const int PressureFieldNumber = 3;
  private global::EnvironmentalData.Types.Pressure pressure_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnvironmentalData.Types.Pressure Pressure {
    get { return pressure_; }
    set {
      pressure_ = value;
    }
  }

  /// <summary>Field number for the "wind" field.</summary>
  public const int WindFieldNumber = 4;
  private global::EnvironmentalData.Types.Wind wind_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnvironmentalData.Types.Wind Wind {
    get { return wind_; }
    set {
      wind_ = value;
    }
  }

  /// <summary>Field number for the "datetime" field.</summary>
  public const int DatetimeFieldNumber = 5;
  private global::EnvironmentalData.Types.DateTime datetime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnvironmentalData.Types.DateTime Datetime {
    get { return datetime_; }
    set {
      datetime_ = value;
    }
  }

  /// <summary>Field number for the "location" field.</summary>
  public const int LocationFieldNumber = 6;
  private global::EnvironmentalData.Types.Location location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnvironmentalData.Types.Location Location {
    get { return location_; }
    set {
      location_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnvironmentalData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnvironmentalData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Temperature, other.Temperature)) return false;
    if (!object.Equals(Humidity, other.Humidity)) return false;
    if (!object.Equals(Pressure, other.Pressure)) return false;
    if (!object.Equals(Wind, other.Wind)) return false;
    if (!object.Equals(Datetime, other.Datetime)) return false;
    if (!object.Equals(Location, other.Location)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (temperature_ != null) hash ^= Temperature.GetHashCode();
    if (humidity_ != null) hash ^= Humidity.GetHashCode();
    if (pressure_ != null) hash ^= Pressure.GetHashCode();
    if (wind_ != null) hash ^= Wind.GetHashCode();
    if (datetime_ != null) hash ^= Datetime.GetHashCode();
    if (location_ != null) hash ^= Location.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (temperature_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Temperature);
    }
    if (humidity_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Humidity);
    }
    if (pressure_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Pressure);
    }
    if (wind_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Wind);
    }
    if (datetime_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Datetime);
    }
    if (location_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Location);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (temperature_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Temperature);
    }
    if (humidity_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Humidity);
    }
    if (pressure_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pressure);
    }
    if (wind_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wind);
    }
    if (datetime_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Datetime);
    }
    if (location_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnvironmentalData other) {
    if (other == null) {
      return;
    }
    if (other.temperature_ != null) {
      if (temperature_ == null) {
        Temperature = new global::EnvironmentalData.Types.Temperature();
      }
      Temperature.MergeFrom(other.Temperature);
    }
    if (other.humidity_ != null) {
      if (humidity_ == null) {
        Humidity = new global::EnvironmentalData.Types.Humidity();
      }
      Humidity.MergeFrom(other.Humidity);
    }
    if (other.pressure_ != null) {
      if (pressure_ == null) {
        Pressure = new global::EnvironmentalData.Types.Pressure();
      }
      Pressure.MergeFrom(other.Pressure);
    }
    if (other.wind_ != null) {
      if (wind_ == null) {
        Wind = new global::EnvironmentalData.Types.Wind();
      }
      Wind.MergeFrom(other.Wind);
    }
    if (other.datetime_ != null) {
      if (datetime_ == null) {
        Datetime = new global::EnvironmentalData.Types.DateTime();
      }
      Datetime.MergeFrom(other.Datetime);
    }
    if (other.location_ != null) {
      if (location_ == null) {
        Location = new global::EnvironmentalData.Types.Location();
      }
      Location.MergeFrom(other.Location);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (temperature_ == null) {
            Temperature = new global::EnvironmentalData.Types.Temperature();
          }
          input.ReadMessage(Temperature);
          break;
        }
        case 18: {
          if (humidity_ == null) {
            Humidity = new global::EnvironmentalData.Types.Humidity();
          }
          input.ReadMessage(Humidity);
          break;
        }
        case 26: {
          if (pressure_ == null) {
            Pressure = new global::EnvironmentalData.Types.Pressure();
          }
          input.ReadMessage(Pressure);
          break;
        }
        case 34: {
          if (wind_ == null) {
            Wind = new global::EnvironmentalData.Types.Wind();
          }
          input.ReadMessage(Wind);
          break;
        }
        case 42: {
          if (datetime_ == null) {
            Datetime = new global::EnvironmentalData.Types.DateTime();
          }
          input.ReadMessage(Datetime);
          break;
        }
        case 50: {
          if (location_ == null) {
            Location = new global::EnvironmentalData.Types.Location();
          }
          input.ReadMessage(Location);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the EnvironmentalData message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Temperature : pb::IMessage<Temperature> {
      private static readonly pb::MessageParser<Temperature> _parser = new pb::MessageParser<Temperature>(() => new Temperature());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Temperature> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::EnvironmentalData.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Temperature() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Temperature(Temperature other) : this() {
        value_ = other.value_;
        unit_ = other.unit_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Temperature Clone() {
        return new Temperature(this);
      }

      /// <summary>Field number for the "value" field.</summary>
      public const int ValueFieldNumber = 1;
      private float value_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Value {
        get { return value_; }
        set {
          value_ = value;
        }
      }

      /// <summary>Field number for the "unit" field.</summary>
      public const int UnitFieldNumber = 2;
      private string unit_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Unit {
        get { return unit_; }
        set {
          unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Temperature);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Temperature other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
        if (Unit != other.Unit) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
        if (Unit.Length != 0) hash ^= Unit.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Value != 0F) {
          output.WriteRawTag(13);
          output.WriteFloat(Value);
        }
        if (Unit.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Unit);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Value != 0F) {
          size += 1 + 4;
        }
        if (Unit.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Temperature other) {
        if (other == null) {
          return;
        }
        if (other.Value != 0F) {
          Value = other.Value;
        }
        if (other.Unit.Length != 0) {
          Unit = other.Unit;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              Value = input.ReadFloat();
              break;
            }
            case 18: {
              Unit = input.ReadString();
              break;
            }
          }
        }
      }

    }

    public sealed partial class Humidity : pb::IMessage<Humidity> {
      private static readonly pb::MessageParser<Humidity> _parser = new pb::MessageParser<Humidity>(() => new Humidity());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Humidity> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::EnvironmentalData.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Humidity() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Humidity(Humidity other) : this() {
        value_ = other.value_;
        unit_ = other.unit_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Humidity Clone() {
        return new Humidity(this);
      }

      /// <summary>Field number for the "value" field.</summary>
      public const int ValueFieldNumber = 1;
      private float value_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Value {
        get { return value_; }
        set {
          value_ = value;
        }
      }

      /// <summary>Field number for the "unit" field.</summary>
      public const int UnitFieldNumber = 2;
      private string unit_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Unit {
        get { return unit_; }
        set {
          unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Humidity);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Humidity other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
        if (Unit != other.Unit) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
        if (Unit.Length != 0) hash ^= Unit.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Value != 0F) {
          output.WriteRawTag(13);
          output.WriteFloat(Value);
        }
        if (Unit.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Unit);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Value != 0F) {
          size += 1 + 4;
        }
        if (Unit.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Humidity other) {
        if (other == null) {
          return;
        }
        if (other.Value != 0F) {
          Value = other.Value;
        }
        if (other.Unit.Length != 0) {
          Unit = other.Unit;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              Value = input.ReadFloat();
              break;
            }
            case 18: {
              Unit = input.ReadString();
              break;
            }
          }
        }
      }

    }

    public sealed partial class Pressure : pb::IMessage<Pressure> {
      private static readonly pb::MessageParser<Pressure> _parser = new pb::MessageParser<Pressure>(() => new Pressure());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Pressure> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::EnvironmentalData.Descriptor.NestedTypes[2]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Pressure() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Pressure(Pressure other) : this() {
        value_ = other.value_;
        unit_ = other.unit_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Pressure Clone() {
        return new Pressure(this);
      }

      /// <summary>Field number for the "value" field.</summary>
      public const int ValueFieldNumber = 1;
      private float value_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Value {
        get { return value_; }
        set {
          value_ = value;
        }
      }

      /// <summary>Field number for the "unit" field.</summary>
      public const int UnitFieldNumber = 2;
      private string unit_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Unit {
        get { return unit_; }
        set {
          unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Pressure);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Pressure other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
        if (Unit != other.Unit) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
        if (Unit.Length != 0) hash ^= Unit.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Value != 0F) {
          output.WriteRawTag(13);
          output.WriteFloat(Value);
        }
        if (Unit.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Unit);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Value != 0F) {
          size += 1 + 4;
        }
        if (Unit.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Pressure other) {
        if (other == null) {
          return;
        }
        if (other.Value != 0F) {
          Value = other.Value;
        }
        if (other.Unit.Length != 0) {
          Unit = other.Unit;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              Value = input.ReadFloat();
              break;
            }
            case 18: {
              Unit = input.ReadString();
              break;
            }
          }
        }
      }

    }

    public sealed partial class Wind : pb::IMessage<Wind> {
      private static readonly pb::MessageParser<Wind> _parser = new pb::MessageParser<Wind>(() => new Wind());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Wind> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::EnvironmentalData.Descriptor.NestedTypes[3]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Wind() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Wind(Wind other) : this() {
        speed_ = other.speed_;
        direction_ = other.direction_;
        unit_ = other.unit_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Wind Clone() {
        return new Wind(this);
      }

      /// <summary>Field number for the "speed" field.</summary>
      public const int SpeedFieldNumber = 1;
      private float speed_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Speed {
        get { return speed_; }
        set {
          speed_ = value;
        }
      }

      /// <summary>Field number for the "direction" field.</summary>
      public const int DirectionFieldNumber = 2;
      private float direction_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Direction {
        get { return direction_; }
        set {
          direction_ = value;
        }
      }

      /// <summary>Field number for the "unit" field.</summary>
      public const int UnitFieldNumber = 3;
      private string unit_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Unit {
        get { return unit_; }
        set {
          unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Wind);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Wind other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Direction, other.Direction)) return false;
        if (Unit != other.Unit) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
        if (Direction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Direction);
        if (Unit.Length != 0) hash ^= Unit.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Speed != 0F) {
          output.WriteRawTag(13);
          output.WriteFloat(Speed);
        }
        if (Direction != 0F) {
          output.WriteRawTag(21);
          output.WriteFloat(Direction);
        }
        if (Unit.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(Unit);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Speed != 0F) {
          size += 1 + 4;
        }
        if (Direction != 0F) {
          size += 1 + 4;
        }
        if (Unit.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Wind other) {
        if (other == null) {
          return;
        }
        if (other.Speed != 0F) {
          Speed = other.Speed;
        }
        if (other.Direction != 0F) {
          Direction = other.Direction;
        }
        if (other.Unit.Length != 0) {
          Unit = other.Unit;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              Speed = input.ReadFloat();
              break;
            }
            case 21: {
              Direction = input.ReadFloat();
              break;
            }
            case 26: {
              Unit = input.ReadString();
              break;
            }
          }
        }
      }

    }

    public sealed partial class DateTime : pb::IMessage<DateTime> {
      private static readonly pb::MessageParser<DateTime> _parser = new pb::MessageParser<DateTime>(() => new DateTime());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<DateTime> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::EnvironmentalData.Descriptor.NestedTypes[4]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public DateTime() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public DateTime(DateTime other) : this() {
        timestamp_ = other.timestamp_;
        timezone_ = other.timezone_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public DateTime Clone() {
        return new DateTime(this);
      }

      /// <summary>Field number for the "timestamp" field.</summary>
      public const int TimestampFieldNumber = 1;
      private long timestamp_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public long Timestamp {
        get { return timestamp_; }
        set {
          timestamp_ = value;
        }
      }

      /// <summary>Field number for the "timezone" field.</summary>
      public const int TimezoneFieldNumber = 2;
      private string timezone_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Timezone {
        get { return timezone_; }
        set {
          timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as DateTime);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(DateTime other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Timestamp != other.Timestamp) return false;
        if (Timezone != other.Timezone) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
        if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Timestamp != 0L) {
          output.WriteRawTag(8);
          output.WriteInt64(Timestamp);
        }
        if (Timezone.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Timezone);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Timestamp != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
        }
        if (Timezone.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(DateTime other) {
        if (other == null) {
          return;
        }
        if (other.Timestamp != 0L) {
          Timestamp = other.Timestamp;
        }
        if (other.Timezone.Length != 0) {
          Timezone = other.Timezone;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Timestamp = input.ReadInt64();
              break;
            }
            case 18: {
              Timezone = input.ReadString();
              break;
            }
          }
        }
      }

    }

    public sealed partial class Location : pb::IMessage<Location> {
      private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Location> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::EnvironmentalData.Descriptor.NestedTypes[5]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Location() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Location(Location other) : this() {
        latitude_ = other.latitude_;
        longitude_ = other.longitude_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Location Clone() {
        return new Location(this);
      }

      /// <summary>Field number for the "latitude" field.</summary>
      public const int LatitudeFieldNumber = 1;
      private float latitude_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Latitude {
        get { return latitude_; }
        set {
          latitude_ = value;
        }
      }

      /// <summary>Field number for the "longitude" field.</summary>
      public const int LongitudeFieldNumber = 2;
      private float longitude_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Longitude {
        get { return longitude_; }
        set {
          longitude_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Location);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Location other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Latitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Latitude);
        if (Longitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Longitude);
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Latitude != 0F) {
          output.WriteRawTag(13);
          output.WriteFloat(Latitude);
        }
        if (Longitude != 0F) {
          output.WriteRawTag(21);
          output.WriteFloat(Longitude);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Latitude != 0F) {
          size += 1 + 4;
        }
        if (Longitude != 0F) {
          size += 1 + 4;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Location other) {
        if (other == null) {
          return;
        }
        if (other.Latitude != 0F) {
          Latitude = other.Latitude;
        }
        if (other.Longitude != 0F) {
          Longitude = other.Longitude;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              Latitude = input.ReadFloat();
              break;
            }
            case 21: {
              Longitude = input.ReadFloat();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
